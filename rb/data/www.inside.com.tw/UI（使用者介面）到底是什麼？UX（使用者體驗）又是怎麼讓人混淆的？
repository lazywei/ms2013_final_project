
Ryan Singer（圖片來源：Rob Lambert）
37signals 的 UI 設計師 Ryan Singer（同時也寫程式、當產品經理）相信：
產品設計應該由 UI 驅動，因為 UI 才是人們真正使用的部份。
在專案進行的任何階段都可能會產生新的見解，開發流程應針對「改變」做最佳化。
UI 是軟體，因此設計師應該要知道如何寫程式。
上週末他在部落格寫了一篇文章 〈 What UI really is (and how UX confuses matters) 〉，用簡單的例子解釋了 UI 是什麼，以及 UI 與 UX（使用者體驗）的差異1：
人們常把「UI」跟「UX」兩個詞混著用。UX 這詞其實很奇妙，因為它本身並沒有指涉任何一件特定的事。介面設計、視覺風格、程式效能、正常運作和功能都是「UX」的一環。而 UX 相關書籍更是包含了研究和開發方法的理論，把事情變得更複雜。
這就是為什麼我會避免教人家「UX」這個術語，那對許多不同的人來說代表了太多不同的東西，因此我傾向於聚焦在個別的技術上。一旦你明白了各種技藝，便可不受混淆地將他們組織成一個系統。對軟體設計而言，所有圍繞著使用者所面臨之問題的核心技術就是 UI 設計。
你可以非常精準地定義 UI——介面就是人和電腦相遇的地方。電腦具備某種功能，人呢則需要利用這些功能來完成「輸入（inputs）」和「輸出（outputs）」。介面就是輸入和輸出的規劃安排，讓人們得以應用電腦的功能來創造所需結果。
舉個例子，一台電腦可以算出任何數字的平方根，像是 167391 的平方根。我無法直接在腦中或是紙上算出答案。為了要運用電腦計算平方根的功能，我需要輸入和輸出。輸入可以是個警示框，具有文字框與「送出」按鈕；輸出部分則是另一個警示框，標上文字並展示答案。

這樣的一個介面提供了一種功能，功能越多事情就會變得更有趣。以自動櫃員機（ATM，國內稱作自動提款機，這裡譯為「櫃員機」有它的目的，看下去便知）為例，請先想像一台只會吐鈔，不會顯示餘額、不能存款、不能做其他任何事的自動櫃員機。這樣的設計就像先前計算平方根的例子——輸入和輸出。現在請想樣，如果你要把自動櫃員機升級，讓它具備提款和存款的功能，那麼新的介面就需要提供一種方式讓人們選擇想要的功能，而這就是「導覽（navigation）」。
各種功能、輸入、輸出和導覽，你要在螢幕上安排輸入和輸出，並且與導覽做好連結。介面就是要在人們使用所需功能——取得平方根或是領取 60 元的現金時，得以運作。
這樣明確的描述能讓你確實指出輸入、輸出、功能，將它們一起稱為「介面」，接著你就可以開始評估使用介面時的經驗並且改善各個環節。
你可以運用視覺風格讓介面看起來更加美觀；你可以研究使用者，找出怎麼樣的介面才能充分符合他們的需求和習慣。
但是對於軟體設計師來說，我建議先深入了解 UI 本身，光是基礎的部份就便能使你獲益良多。

What UI really is (and how UX confuses matters)↩


