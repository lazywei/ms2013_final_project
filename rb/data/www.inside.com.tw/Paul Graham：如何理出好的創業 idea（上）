
圖片來源：Flickr

原文是 〈How to Get Startup Ideas 〉，作者 Paul Graham 是 Y Combinator 創辦人。
此系列文章共有三篇，本篇為第一篇。

要想獲得創業的 idea，請別試圖把它想出來，而是要尋找未被解決的問題，最好是你自己遇到的問題。
最好的創業 idea 通常有三個相同之處：它們是創辦人自己想要、自己能做出來、別人不認為值得去做的東西。微軟、蘋果、Yahoo、Google 和 Facebook 都是這樣開始的。
問題
為什麼解決你自己遇到的問題如此重要？原因之一是，這能保證問題是確實存在的。你只應該在存在的問題上面花功夫，這再明顯不過，但目前，創業公司所犯的最常見錯誤就是試圖解決一些沒人遇到的問題。
我自己也犯過這樣的錯誤。1995 年，我開了家公司，想要把藝術畫廊搬到網路上。但事實是，畫廊根本就不想要到網路上去。那我為什麼還在這個愚蠢的主意上面花了半年時間呢？因為我沒有注意使用者，生造了一個與現實無關的模型，傻乎乎地埋頭浪費時間。直到我試圖說服使用者付費時，我才明白我的模型是錯的。即便如此，我還是心有不甘，花了很長的時間想改變使用者。我自己陷進去了，在開發上花了大量時間，一心想著一定要讓他們接受！
為什麼有那麼多的創辦人會做一些沒人要的東西呢？因為在一開始，他們創業的 idea 就是想出來的。這樣做相當危險，不僅想不出來幾個好的點子，還會產生一堆聽上去合理但實際上根本是錯誤的東西。你一不小心就會被自己騙進去，想試著把它實現。
在 Y Combinator 我們會把這類點子叫做「虛構式」或「情境喜劇式」（編按：Sitcom, Situation Comedy）的 idea。想像一下，電視連續劇的主角之一開始創業了，然後編劇就得構思點東西出來讓他去做，但好的創業 idea 可不是想有就能有的，於是，編劇就會編出一個聽上去合理但實際上很糟糕的 idea。
舉個例子：為寵物主人打造一個社交網路。這聽上去好像也沒什麼不對勁，養寵物的人成千上萬，為了寵物，他們一個個費盡心思而且花錢不手軟。所以，如果有這麼一個讓寵物主人之間互相交流的網站，他們憑什麼會不喜歡呢？當然，也不是所有人都有興趣，以 2~3% 來估計忠實使用者，那使用者數量也起碼上百萬。你可以向他們提供專門的商品，又或者對高級功能收費。
這類 idea 的問題在於，你向你養寵物的朋友介紹時，他們不會說：「我絕不會用這東西。」而是會說：「嗯，可能我會用得上吧。」等網站正式上線後，還會有更多的人認為這個 idea 是合理的。他們自己不會去用，至少目前不會，但他們會想像別人有使用的可能。如果整個世界都是類似的反應，那最後你連一個使用者都得不到。
井
一個創業專案推出後，必須有一些的確需要該產品的使用者——不是指那些用了一天就走的人，而是指迫切需要它的人。通常這類使用者群在一開始的時候都比較小，原因是如果有大量的人迫切需要某樣東西，而這樣東西只需一家創業公司的努力就能把它實現出來，那它很有可能早就存在了。這就意味著，你得在一個地方妥協：「創造許多人都只要一小部分的東西，或是就只針對一小部分的人做出他們確實需要的東西。」請選擇後者吧。不是所有這類 idea 都是好的創業 idea，但所有好的創業 idea 都是屬於這一類的。
假設 x 軸代表所有可能需要你的產品的人，y 軸代表他們需要的程度。想像一下 Google 在這張圖上的樣子，顯然是個巨大的火山口，又寬又深。使用者數量龐大，也離不開它。剛剛起步的創業公司無法開挖這麼大一個火山口。所以你就有必要選擇所要的洞的形狀，開口較大但較淺的洞，或是就像一口井一樣，勘口小但較深。
「虛構式」的創業 idea 通常屬於第一種，有大量的人會對寵物主人的社交網路表示出一點點興趣。但幾乎所有好的創業 idea 都屬於第二種。微軟在做出 Altair Basic（BASIC 直譯器的一種，由比爾蓋茲及保羅艾倫在 1975 年共同為 Altair 8800 電腦所開發）的時候，就成了一口井。在當時，擁有 Altair 的人並不多，算下來不過幾千人，但如果沒有這款軟體，他們就只能用機器語言進行程式設計。30 年後，Facebook 誕生時也同樣是一口井。他們的第一個網站只對哈佛學生開放，也不過幾千人的規模，但是，這區區的幾千人卻迫切需要它、離不開它。
當你有什麼創業 idea 時，請問自己這些問題：「現在有誰要這個東西？誰會迫切需要？」哪怕是一個由兩人創業團隊做出的差強人意的第一個版本，他們也還是要嗎？如果這兩個問題你回答不上來，那你的 idea 很有可能不值得實踐。
你不需要考慮井口的大小，而是要關注如何把井做深，井口的大小只是你在追求井的深度（和速度）的一個副產品。在實踐的當中，井口的大小和深淺的聯繫十分緊密，當你發現一個 idea 能強烈吸引到一群特定使用者時，就是一個好的跡象。
需求的形狀像一口井可以說是好的創業 idea 的一個必要條件，但這還不夠。如果說 Mark Zuckerberg 做的產品只能吸引哈佛學生的話，那就稱不上是一個好的創業 idea。之所 Facebook 是個好的 idea，是因為它從一個相對較小的市場迅速成長了起來。大學院校的情況都差不多，如果它在哈佛能行得通，那在其它院校也同樣能行得通，所以 Facebook 就迅速擴散到其它院校了。一旦你把所有的大學生都拿下了，那你只需敞開大門，其他人就會自己走進來。
微軟的情況也類似，Altair Basic、其它機器上的 Basic、Basic 之外的其它語言，再來是作業系統，然後是應用程式；最後 IPO。
自我
你如何判斷一個 idea 是否能成功？你又如何判斷某樣東西是否是一家大公司萌芽的前兆，或只是一個小眾產品？通常你都無從判斷。Airbnb 的創辦人在剛開始的時候並不知道自己面對著多大一個市場。起初，他們的 idea 比較局限，就只是打算在會展期間讓房子主人能把空餘的地方出租給別人，並沒有預見到這個 idea 會大範圍擴張開來。在一開始他們只覺得自己可能會成功，Bill Gates 或 Mark Zuckerberg 剛開始的時候應該也差不多。
偶爾也有從一開始就清楚知道的產品，知道這產品能從剛開始的小眾圈子裡走出來。有時，我能看到不太明顯的路徑，而這是我們 Y Combinator 的一大專長。但無論你經驗多豐富，都不可避免會面臨一些局限。
如果預測不了自己是否能找到 idea，又怎麼在多個 idea 之間選擇呢？事實叫人失望，但也很有趣：「如果你就是這方面的人才，那你的預感也不會差到哪裡去。如果你處在一個快速變化領域的前端，當你預見有什麼東西是值得一做的話，很有可能你就是對的。」
在 Zen and the Art of Motorcycle Maintenance  一書裡，作者 Robert Pirsig 這樣說：「想知道如何創作一幅完美的畫作？簡單！讓自己變得完美，然後自然地去畫就是了。」
我在高中讀了這本書之後，一直都在思考這句話。我無法評論他針對畫畫給的建議到底有多大用處，但就創業者面臨的情況而言，卻是很合適的。從經驗出發，要想獲得好的創業 idea，你就需要成為能找出這種 idea 的那類人。
談到處在某個領域的前端，這並不是說你就必須是推動領域發展的那個人。你同樣可以是處在前端的使用者。這其實並不是什麼難事，Mark Zuckerberg 是一個程式師，在電腦上面花了大量的時間，所以 Facebook 對他來說就是一個很自然的 idea。假如你在 2004 年問一個 40 歲左右的中年人願不願意半公開地把自己的個人生活放到網路上去，他們多半會以為你瘋了。但 Mark 早就活在網路上，對他來說這個 idea 自然得很。
Gmail 之父 Paul Buchheit 說過，那些處於快速變化的領域的前端的人，是「活在未來」的。再把他的話和 Pirsig 的結合一下，就成了：「活在未來，再把缺少的做出來。」（Live in the future, then build what’s missing）
這就說明了許多最大的創業公司是如何開始的。說起來，蘋果、Yahoo、Google、Facebook 一開始甚至都不是間公司，它們是從創辦人所做的東西裡發展起來的，因為當時世界上似乎有未被滿足的空白。
如果你觀察一下那些成功的創業者找到 idea 的方法，就會發現，他們通常都是先把自己的大腦準備好了，然後再被外部刺激一下，idea 就出來。Bill Gates 和 Paul Allen 聽說了 Altair，就想：「我覺得我們可以為它做一個 Basic 直譯器。」Dropbox 創辦人 Drew Houston 經常會忘了帶自己的 USB 隨身碟，於是他就想：「我必須要把檔案存到網上去。」聽說過 Altair 的人不在少數，忘記帶 USB 隨身碟的人更不在少數，這些外部刺激之所以能促使這些創辦人開辦一家公司，是因為他們的經歷準備了他們，只要機會一出現，就會被他們注意到。
就創業 idea 來說，用在它們身上的動詞不該是「想到」而應該是「注意到」。在 Y Combinator，我們會把從創辦人自己的經歷當中自然產生的 idea 叫作是「有機的（organic）」創業 idea。最成功的創業公司幾乎都是這樣發展起來的。
這可能不是你希望聽到的。你可能本來想著能在這裡找到創業 idea 的訣竅，但我卻告訴你說，關鍵要有一個以正確方式準備好的頭腦。儘管令人失望，但這卻是事實。從某種程度上說，這其實也是秘訣，只不過這個秘訣在最壞的情況下要花上你一年的時間，而不只是一個週末。
如果你現在沒處在某個快速變化的領域的前端，沒關係，你也可以走到某個前端。比如說，一個人只要智商中上，就可以在一年時間裡走到程式設計的前端（比如編寫手機應用）。一家成功的創業公司會至少消耗你 3~5 年時間，這樣算下來，一年的準備也是合理的投入。
在可見的未來裡，學習程式設計也是有必要的。按 Marc Andreessen 的話來說就是，軟體吞噬世界，這個趨勢還會持續數十年。
懂得程式設計以後，只要你有了 idea，就能夠實現出來。程式設計當然也不是非學不可（Jeff Bezos 就不會），但卻是一大優勢，假如你在構思一個類似如何做出一個大學版的 Facebook 的 idea 的話，你就不再僅限於「這是個有趣的 idea」但卻只是想想而已，你可以變成「這是個有趣的 idea，我今晚就動手做個初期版本出來。」假如你既是程式員又是目標使用者的話，效果更好，因為從開發新版本到使用者測試這個步驟只需要你一個人就能完成了。
>> 〈Paul Graham：如何理出好的創業 idea（中） 〉

