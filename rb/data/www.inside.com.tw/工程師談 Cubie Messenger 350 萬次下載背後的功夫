

國人自製的 Cubie Messenger 下載次數突破 350 萬，團隊中的工程師之一 Ingram Chen 在部落格 Xexex’s Java 和其他二三事 發表 〈 Cubie 3.5 Million Download 〉，跟大家聊聊支撐 Cubie 聊天功能背後的 UX optimization、Feature set 和 Growth hack。（UX optimization 為「使用者體驗最佳化」、Feature set 是指決定程式要有哪些功能，而 Growth hack 的意思是「設法讓流量成長」，「Growth Hacker」就是我們說的「流量成長駭客」）
本文作者：Ingram Chen（@ingramchen），大學和研究所都是讀化工系，因緣際會成為 Java 愛好者，Din.Ben.Don!訂便當管理系統與科科科站長。目前負責 Cubie Messenger 的 server 與 iOS 版 app。
今天不小心在 Hacker News 看到有人貼 Cubie 的成長，雖然沒有人討論，但好歹也進過首頁一次。啊，我人生的目標可以打一個勾了，完成進 Hacker News 首頁的悲願。
編按：關於 Hacker News，讀者們可以參考一下 Inside 之前的文章：網路人重要資訊來源（一）：Hacker News，超宅但又超重要的資訊集散地
不過即然提到了成長，我的話閘子也開了，屁一下吧……到底是怎麼達到 3.5M 下載數的？真正的原因不明，我覺得有點糊理糊塗就達到了，我想如果沒有不小心選到塗鴉這個甜蜜點，我們現在成績應該會很難看.
那 Cubie 當初為什麼加上塗鴉功能? 就 msn 很早以前就有這個功能, 我們家的美術很想要用, 所以就做出來玩玩看, 做出來後我們 團隊裡的人自己也玩的很開心, 所以這就變主要功能之一了。(當時 drawsomething 還很紅，不過跟它實在沒什麼關係，主要還是因為 msn 曾經紅過一陣子白板塗鴉, 我們比較有信心這功能在 messenger 這個領域有用戶會用)
塗鴉功能花了一個禮拜就做好了, 技術上沒有困難點, 當時就很煩惱為什麼這麼簡單好玩的功能 line whatsapp 還不做? 肯定不是技術問題, 然後也懷疑 msn 當初將這功能下架的背後原因, msn 白板不是很受好評嗎? 怎麼忽然不做了? 雖然有很多疑問, 但即然做好了就上了, 出了問題再拿掉就好。現在看來這選擇正確無誤。
塗鴉聊天是我們的甜密點，但支撐這個甜密點，背後卻有很多事要做，有很多點讓我們掙扎不已，尤其是 UX optimization、Feature set、Growth hack 這三個點上。(這三個英文好難翻譯，這就交給各位了)
UX optimization
UX optimization 我們沒做到，應該說只花了點功做了 UX，沒有到最佳化，一方面人材有限，另一方面時間有限。我們頂多要求按鈕不易看錯、按錯，避免太複雜的流程這樣。更細的就沒有再做了，如果有時間的話這是個可以花很多時間鑽研、有趣的題目，但我個人認為這點跟成長快慢與否沒有很大的關聯，老闆也這麼想。一個界面一個流程如果改到第三次我們就會停了，不論最終結果做的好不好。所以這大概只佔我們的 <10% 的工夫吧。
我們最近的一次 UX 改善是登入畫面，一整個翻新，用活潑清爽的界面取代制式的表單，A/B Test 的結果是增加 2%，聽起來很少吧，我們也這麼覺得，所以如果想要有更大的改善，勢必有其他的因素，而不是單單的 UX 而已。盡管 2% 的增幅很少，正面的結果還是太珍貴了，新的界面就沿用下去了。題外話，UX 不是指好看很炫的 UI，不過 UI 的效果和 UX 類似，對成長的幫助也是有限 (我個人覺得啦，YMMV)，最好的例子是 Path 2.0，它算是最炫的 UI 了，但是現在又有誰再提 Path 呢？反觀 Facebook UI 平庸至極，還不是一直嚇嚇叫。只有做遊戲的，這種生命週期短的 App 值得大量投資在 UI 上。
Feature set
Feature set 是我們花最多時間的地方，我們有做不完的已知功能，也有很多想嘗試但又不敢下手的全新功能。是的，功能分為兩大類，一是已知，另一是未知，先來說說已知的功能。Cubie 是進入一個已經成熟的市場，messenger 的功能大家想的到的市場上都有人實作出來了，像是客製鈴聲、桌布、支援備份之類的。這時候用戶就會來提需求了，用戶會提一些別的 messenger 也有的功能 (注意！用戶只會提他 /知道/ 的功能)，希望 Cubie 也有。那我們到底該不該做呢？我個人不認為做已知的、大家都有的功能會讓 App 大幅成長，試想，做客製鈴聲、客製桌布這類的功能會帶來更多新的用戶嗎？也許有可能，但我們也很難量化追蹤它的效益。現階段我們只能 /假設/ 這些已知的功能，可以 /留住/ 用戶，讓用戶覺得貼心，不會外流到其他的競爭對手。留住用戶也是很重要的，如果流失大於成長，那就算成長的數字好看也沒用。很可惜的是我們只能 /假設/ 會留住，我們還無法量化「新增某個的功能」能夠改善多少用戶流失量。所以很有可能我們團隊汲汲於豐富的已知功能、那些對手也有的功能，到頭來只是瞎忙一場。
好了，來說說未知的功能，對 Cubie 來說就是市場上其他 messenger 沒提供的，白話的說法就是創新。創新的功能最有可能帶來新的用戶，但是風險也是極高。說真的我個人希望這點佔 Cubie 開發的比例高一點，很可惜不是，因為他媽的太難了。還有就是別指望用戶會帶給你一線曙光，用戶只會建議已知的功能。不只是用戶，我們團隊內部裡大多時候也是這樣。我們有花一定的工夫在開發創新的功能，但也不是完全的創新，通常是融合其他領域的點子到 messenger 內而已，但光是這樣風險就很高了，市場上失敗的例子多到數不完。要有一點絕佳的點子，完美的融合到 messenger 內真是可遇不可求。我個人期許我們在這點上做得更好。
另一掙扎的點是，全新的功能也許是個雙面刃，如果你常用 App，就會發現現在開始流行 行星+衛星 的 App 組合。例如 Facebook 的主 App 是行星，如果有其他的獨立的功能，他們會額外推出衛星 App，像是 Facebook Camera 和 Facebook Messenger。我想 Mobile 生態會發展出衛星 App 是必然的，原因是單一個 App 在各方面都不能 scale，當 App 的功能多到了某個程度後：
對使用者來說，增加了更多層的選單，UX 下降，用戶對你 App 的認同也會糢糊。
對開發者來說，程式的複雜度已經超出了可以管理的範圍。
對市場佔有率來說，如果你多了一個的 App 佔據用戶的 Home screen，那佔有率就直接成長兩倍。
另外，衛星 App 是個重新行銷的機會，如果一直都是同樣的 App 加新功能，用戶會麻木的，我們團隊之前做遊戲時就是這樣，你得想個法子出個二代，或者是 1.5 代也行，重新 re-brand 後新用戶才會再來，舊用戶才會回鍋。聽起來 行星+衛星 的策略好像優點頗多，但目前只有看到大公司大 App 在玩。我不曉得小 App 走這樣的策略會如何，是否會適得其反？未來 Cubie 加上了更多功能，尤其是全新的，勢必會撞到這個問題。
Growth Hack
Growth Hack 我們有做，也有做 A/B Test，讓 Data driven 我們的設計。我們現在通通在 Android 平台上執行 A/B Test，原因呢？當然是他媽的 App Store 審查要 10天 啊。你設計了一個 A/B Test 結果要兩週後才有結果不是氣死人嘛？Android 用戶和 iOS 用戶也許有不同的喜好，但是當量級到一個程度後就沒差了，你在 Android 上做的結果可以套在 iOS 上，最少我們的經驗是這樣。目前我們的 growth hacking 不是很深層的，只做到連結其他的服務的基本功能，這一點是真的弱掉了。上一回老闆到了矽谷一趟，那邊的圈子隨口給的 growth 建議都讓人眼睛一亮，矽谷在這方面真是有一套。我們是否該停止大量投入在 Feature set，將一半的時間移過來做深層的整合呢？Growth Hack 的總帥 Andrew Chen 也是如此建議我們 (他當然覺得 Growth Hack 最重要的啦)。我個人也同意他的建議，不過我的原因只是 Cubie App 在功能上已經太肥了，造成程式的架構太複雜。(I am a developer!)
用戶成長還有其他的點嗎? 我是做 server 的所以要臭屁一下自己的功勞: server 在不斷的成長和爆炸的循環之下, 總算調整到可以穩定承受用戶數增加(現階段啦)。後台要承受百萬支手機同時在線上聊天還是要有點經驗才做的到, 我們跌跌撞撞地也達到了那個點. 我們學到什麼都要非同步操作, 後台的 server 因為放在 amazon, 大概兩~三週就會有一台server 無預警掛掉, 我們的架構也可以容忍這種當機. (ps. 現在大約是20台 server). Market 快速成長, 後台也要追的上同樣的成長速度, 不然用戶數就卡住了。當然現在的硬體很好, open source 資源比以前更豐富, 所以要開發百萬用戶的後台不再是火箭科學了. 有經驗的工程師大家現在都辦得到，只是要撐過成長的陣痛期。
好了，這就是我目前對於 Cubie 成長各方面的看法，有時間有資源當然是想全部都做到 100 分啊。不過，你曉得的。

