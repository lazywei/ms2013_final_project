

照片來源：Vu Bui
一週前，我們在這篇 〈 李開復：新創公司為什麼會失敗？ 〉 學到，李開復博士指出幾個新創公司為何會失敗的原因，其中有一個跟目標有關：
野心太大。新創公司因該要把目標瞄準在使用者需求上——選定一個市場、一個客層，用一種令人讚賞的方式解決使用者真正的需求。一旦在一小群使用者中得到驗證，即可拓展到更多的使用者。如此不斷反覆，就是「精實創業」。
而 web 框架 Rails 的創造者 David Heinemeier Hansson 也是這麼想（他同時也是 37signals 的合夥人）。
照片來源：esti-
David 除了是程式設計師，也是賽車的愛好者。他前幾天在 37signals 的部落格寫了一篇文章 〈 Follow the goal creep 〉1，藉由自己參加賽車比賽的經驗，討論如何訂立目標，然後循序漸進地慢慢往上爬：
當我開始參加賽車比賽時，我想如果自己能在某個還可以的系列賽得到中間名次就很棒了。畢竟，賽車對我來是刺激感的延伸，那種完全醉心於一種活動的感覺會讓人忘記時空的存在。
過沒多久，我的野心開始膨脹。我把目標從完賽時排在中間名次提升到奪得前十名——當然不是在我沉浸於完成第一個目標時的榮耀、享受每次我自己定義的成就之前。我自己下的成功定義對許多人來說根本是種徹底失敗。（哪個笨蛋會因為在這種比賽得到中間名次還很開心？我！當時的我。）
所以，我的目標慢慢地向前。慢慢地從得到前十名到站上頒獎台，到更大的系列賽，到更快、下壓力（downforce）更強的車，到更激烈的競爭，到更長的比賽、到更好的車隊，然後就這樣繼續下去。
關鍵在於一次取得一點點的進展。我們的終極目標或許是參加 24 小時 Le Mans 賽事（這個目標本身就是從「參加」開始進步，然後才是「完賽」，最後「獲勝」），但那並非真正使你持續不斷、繼續前進的動力。
你可以把這種緩慢推進的目標想成是一種真實生活的測試導向開發（TDD，test-driven development）。在 TDD 的概念中，你不需要預先完整規劃出整個程式，只需要寫一個簡單的測試，然後實作程式碼通過測試即可。
設定小目標，他們才是能夠讓你持續前進而不被龐大目標壓垮的關鍵，例如前面說的，寫一些簡單的測試。從「極限競速」（一種電動遊戲）直接跳到 Le Mans 賽事對大多數人來說是遙不可及的，我也一樣。
但是這些微不足道的目標會讓你的大腦以為自己正在經歷一連串的成功。適度地慶祝這些小成功很重要，他們是你持續前進、達成更多目標的燃料。
當初我在學習 Ruby 語言、開發 Basecamp（一個 37signals 的產品）時也是一樣的道理。如果一開始的目標是發展出一個顛覆產業的架構、打造一個數百萬人使用的程式，那我大概永遠都不會放下 Xbox 搖桿著手去進行這些工作。
推出 Basecamp 的時後，我們對於產品可以帶來的收入 當其他人總是想著數以百萬計的使用者和收入時，我們的目標是希望一年後 Basecamp 可以帶來每個月 4000 美金的收入。
結果我們幾個禮拜後就可以慶祝自己達到這個其他人會視為一種失敗的目標了。一年之後，當 Basecamp 賺到的錢可以拿來應付所有開銷，也讓我們不必再繼續原本的顧問工作時，我們又慶祝了一次。
我想重點在於定下屬於自己的目標，而不是去追求別人的。他們跟你的基準不同，如果想要一步登天，可能你在飛起來之前，理想與氣力就都耗盡了。
想像一下現代飛機的發明者萊特兄弟，當他們開始試飛自己打造的飛機時，腦中所想的是「能飛多久」還是「飛越大西洋」？沒錯，他們改變了現代航空史，但一切的起源是「希望飛機可以飛得起來，而且受到我們的控制」。
 

Follow the goal creep↩


